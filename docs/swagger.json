{
    "swagger": "2.0",
    "info": {
        "description": "This is an Pojok Baca API",
        "title": "Pojok Baca API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Tatakarai",
            "email": "tatakarai@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/products": {
            "get": {
                "description": "Retrieve all available books with stock and rental info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Get all books",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BookResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admin users can create books",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Create a new book",
                "parameters": [
                    {
                        "description": "Book creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GetBookData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateBookResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Get a single book using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Get a book by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.BookSwaggerByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admin can update a book's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Update a book by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Book Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateBookByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Only admin can delete a book by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Books"
                ],
                "summary": "Delete a book by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/rentals": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a list of rental data for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rentals"
                ],
                "summary": "Get rental history by logged-in user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.RentalUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new book rental by user. Requires login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rentals"
                ],
                "summary": "Create a rental",
                "parameters": [
                    {
                        "description": "Rental request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RentalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RentalResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate user and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve user profile based on JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get current logged-in user data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Create a new user account (name, email, password required)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BookResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GetAllBooksResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.BookSwagger": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "Self Development"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Atomic Habits"
                },
                "rental_cost": {
                    "type": "integer",
                    "example": 20000
                },
                "stok": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.BookSwaggerByIDResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/dto.BookSwagger"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.CreateBookResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "success create book"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "details": {},
                "message": {
                    "type": "string",
                    "example": "something went wrong"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "dto.GetAllBooksResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "programming"
                },
                "id": {
                    "type": "integer",
                    "example": 0
                },
                "name": {
                    "type": "string",
                    "example": "johndoe"
                },
                "rental_cost": {
                    "type": "integer",
                    "example": 1
                },
                "stok": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.GetBookData": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "Self Development"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Atomic Habits"
                },
                "rental_cost": {
                    "type": "integer",
                    "example": 20000
                },
                "stok": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "dto.LoginSuccessResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "your-jwt-token"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "dto.RegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@gmail.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "dto.RegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/dto.RegisterResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.RentalDataResponse": {
            "type": "object",
            "required": [
                "book_id"
            ],
            "properties": {
                "book_id": {
                    "type": "integer",
                    "example": 1
                },
                "rent_date": {
                    "type": "string",
                    "example": "2020-01-01"
                },
                "return_date": {
                    "type": "string",
                    "example": "2020-01-01"
                },
                "status": {
                    "type": "string",
                    "example": "borrowed"
                }
            }
        },
        "dto.RentalRequest": {
            "type": "object",
            "required": [
                "book_id"
            ],
            "properties": {
                "book_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.RentalResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/dto.RentalDataResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.RentalUserDataResponse": {
            "type": "object",
            "properties": {
                "book_id": {
                    "type": "integer",
                    "example": 2
                },
                "book_title": {
                    "type": "string",
                    "example": "Atomic Habits"
                },
                "rent_date": {
                    "type": "string",
                    "example": "2025-07-03"
                },
                "rental_id": {
                    "type": "integer",
                    "example": 1
                },
                "return_date": {
                    "type": "string",
                    "example": "2025-07-10"
                },
                "status": {
                    "type": "string",
                    "example": "Borrowed"
                }
            }
        },
        "dto.RentalUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RentalUserDataResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Rental list"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.UpdateBookByIDResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/dto.UpdateResoponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "dto.UpdateBookRequest": {
            "type": "object",
            "required": [
                "category",
                "name",
                "rental_cost",
                "stok"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rental_cost": {
                    "type": "integer",
                    "minimum": 0
                },
                "stok": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "dto.UpdateResoponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "programming"
                },
                "id": {
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "type": "string",
                    "example": "johndoe"
                },
                "rental_cost": {
                    "type": "integer",
                    "example": 1
                },
                "stok": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UserDataResponse": {
            "type": "object",
            "properties": {
                "deposit": {
                    "type": "integer",
                    "example": 4
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John doe"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/dto.UserDataResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Success Get User"
                },
                "status": {
                    "type": "string",
                    "example": "Success"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}